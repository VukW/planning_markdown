from app import db
import random
from PIL import ImageDraw, Image, ImageFont


def random_image(seed):
    random.seed(seed)
    width = random.randint(128, 1024 + 1)
    height = random.randint(128, 1024 + 1)
    img = Image.new('RGB', size=(width, height), color='white')
    rotate_direction = random.randint(0, 3)
    if rotate_direction in (0, 2):
        font_size = random.randrange(width // 25, width // 10)
    else:
        font_size = random.randrange(height // 25, height // 10)
    font = ImageFont.truetype("arial.ttf", size=font_size)
    txt = Image.new('RGB', (16 * font_size, int(1.1 * font_size)), color=(192, 192, 192))
    d = ImageDraw.Draw(txt)
    d.text((0, 0), "New image mock, generated by PIL", font=font, fill=0)
    rotated = txt.rotate(90 * rotate_direction, expand=1)
    img.paste(rotated, box=(random.randrange(width // 2),
                            random.randrange(height // 2)))
    d = ImageDraw.Draw(img)
    n_steps = random.randrange(10, 20)
    prev_point = [random.randrange(width), random.randrange(height)]
    prev_horizontal = True
    for _ in range(n_steps):
        next_dir = random.randint(0, 1)
        next_point = [0, 0]
        if prev_horizontal:
            next_point[0] = prev_point[0]
            if next_dir == 0:
                next_point[1] = random.randrange(prev_point[1] + 1)
            else:
                next_point[1] = random.randrange(prev_point[1] - 1, height)
        else:
            next_point[1] = prev_point[1]
            if next_dir == 0:
                next_point[0] = random.randrange(prev_point[0] + 1)
            else:
                next_point[0] = random.randrange(prev_point[0] - 1, width)
        prev_horizontal = not prev_horizontal
        d.line(prev_point + next_point, fill=0, width=3)
        prev_point = next_point
    return img


class ImageToMark:
    def __init__(self, image_id):
        self.image_id = image_id
        self._image = None

    @property
    def markdown(self):
        """planning markdown is saved here (redirection to database)"""
        return db[self.image_id]

    @markdown.setter
    def markdown(self, value):
        db[self.image_id] = value

    @property
    def image(self):
        if self._image is None:
            self._image = random_image(self.image_id)
        return self._image


class ImagesToMark:
    def __init__(self):
        pass

    def __getitem__(self, item):
        return ImageToMark(item)