from flask import Flask, jsonify, send_file, abort, request
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import json
import random

app = Flask(__name__)


def serve_pil_image(pil_img):
    img_io = BytesIO()
    pil_img.save(img_io, 'JPEG', quality=70)
    img_io.seek(0)
    return send_file(img_io, mimetype='image/jpeg')


def random_image(seed):
    random.seed(seed)
    width = random.randint(128, 1024 + 1)
    height = random.randint(128, 1024 + 1)
    img = Image.new('RGB', size=(width, height), color='white')
    rotate_direction = random.randint(0, 3)
    if rotate_direction in (0, 2):
        font_size = random.randrange(width//25, width//10)
    else:
        font_size = random.randrange(height//25, height//10)
    font = ImageFont.truetype("arial.ttf", size=font_size)
    txt = Image.new('RGB', (16*font_size, int(1.1 * font_size)), color=(192, 192, 192))
    d = ImageDraw.Draw(txt)
    d.text((0, 0), "New image mock, generated by PIL", font=font, fill=0)
    rotated = txt.rotate(90*rotate_direction, expand=1)
    img.paste(rotated, box=(random.randrange(width//2),
                            random.randrange(height//2)))
    d = ImageDraw.Draw(img)
    n_steps = random.randrange(10, 20)
    prev_point = [random.randrange(width), random.randrange(height)]
    prev_horizontal = True
    for _ in range(n_steps):
        next_dir = random.randint(0, 1)
        next_point = [0, 0]
        if prev_horizontal:
            next_point[0] = prev_point[0]
            if next_dir == 0:
                next_point[1] = random.randrange(prev_point[1] + 1)
            else:
                next_point[1] = random.randrange(prev_point[1] - 1, height)
        else:
            next_point[1] = prev_point[1]
            if next_dir == 0:
                next_point[0] = random.randrange(prev_point[0] + 1)
            else:
                next_point[0] = random.randrange(prev_point[0] - 1, width)
        prev_horizontal = not prev_horizontal
        d.line(prev_point + next_point, fill=0, width=3)
        prev_point = next_point
    return img


@app.route('/image/<int:image_id>')
def get_picture(image_id):
        image_id = int(image_id)
        return serve_pil_image(random_image(image_id))


@app.route('/next')
def next_image_id():
    for image_id in range(1000000):
        if str(image_id) not in global_dict_to_save.keys():
            return jsonify(next_unmarked_picture=image_id)
    return abort("no unmarked pictures found")


@app.route('/image/<int:image_id>/markdown', methods=['GET', 'POST'])
def already_saved_markdown(image_id):
    if request.method == 'GET':
        return jsonify(global_dict_to_save.get(str(image_id), {}))
    elif request.method == 'POST':
        global_dict_to_save[str(image_id)] = request.get_json(force=True)
        with open('saved_markdowns.json', 'w') as f:
            json.dump(global_dict_to_save, f)
    return jsonify(msg="ok")


@app.route('/image/all/markdown')
def all_saved_markdowns():
    return jsonify(global_dict_to_save)

if __name__ == "__main__":
    global_dict_to_save = {}
    try:
        with open('saved_markdowns.json', 'r') as f_to_read_global_dict:
            global_dict_to_save = json.loads(f_to_read_global_dict.read())
    except FileNotFoundError:
        pass

    app.run(port=8000, debug=True)
